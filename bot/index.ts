import { Telegraf } from "telegraf";
import * as crypto from "crypto";

const BOT_TOKEN = process.env.BOT_TOKEN!;
const BOT_USERNAME = process.env.BOT_USERNAME!; // –±–µ–∑ @, –Ω–∞–ø—Ä. my_calls_bot
const ROOM_SECRET = process.env.ROOM_SECRET!;

function b64url(buf: Buffer) {
  return buf
    .toString("base64")
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "");
}
function randomId(n = 12) {
  return b64url(crypto.randomBytes(n));
}
function sign(rid: string, exp: number) {
  return b64url(
    crypto.createHmac("sha256", ROOM_SECRET).update(`${rid}_${exp}`).digest()
  );
}
function makeToken(ttlSec = 3600) {
  const rid = randomId(12);
  const exp = Math.floor(Date.now() / 1000) + ttlSec;
  return `${rid}_${exp}_${sign(rid, exp)}`;
}

const bot = new Telegraf(BOT_TOKEN);

bot.command("call", async (ctx) => {
  const token = makeToken();
  const link = `https://t.me/${BOT_USERNAME}?startapp=${token}`;

  await ctx.reply(
    [
      "üé• –°–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.",
      "–ü–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∏ –æ–±–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É:",
      link,
    ].join("\n")
  );

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ ‚Äî –≤ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏—Å—á–µ–∑–Ω–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º
  await ctx.reply("–û—Ç–∫—Ä—ã—Ç—å –∑–≤–æ–Ω–æ–∫", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            web_app: { url: process.env.WEBAPP_URL || "https://example.com" },
          },
        ],
      ],
    },
  });
});

bot.launch();
console.log("Bot started");
